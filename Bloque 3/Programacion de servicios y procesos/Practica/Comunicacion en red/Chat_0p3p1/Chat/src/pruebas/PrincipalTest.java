package pruebas;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.util.*;

import static org.junit.Assert.assertEquals;

public class PrincipalTest {
    @Test
    public void basicTest() {
        Assertions.assertEquals(1, orderedPositionOf(new String[]{"first", "second", "third", "fourth"}, 3));
        Assertions.assertEquals(2, orderedPositionOf(new String[]{"Madrid", "Lisbon", "Paris", "London", "Rome"}, 4));
        Assertions.assertEquals(3, orderedPositionOf(new Integer[]{1, 2, 3, 4, 5}, 4));
        Assertions.assertEquals(0, orderedPositionOf(new Integer[]{
                1, 1, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555
                , 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555
                , 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555
                , 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555
                , 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555
                , 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555
                , 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555
                , 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555
                , 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555
                , 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555
                , 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555
                , 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 51, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555
                , 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555
                , 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555
                , 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555
                , 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555
                , 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555
                , 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555
                , 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555
                , 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555
                , 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555
                , 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555
                , 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555
                , 555555555, 3, 4, 555555555, 555555555, 3, 4, 51, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555
                , 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555
                , 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555
                , 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555
                , 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555
                , 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555
                , 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555
                , 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555
                , 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 51, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555
                , 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555
                , 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555
                , 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555
                , 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555
                , 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555
                , 555555555, 555555555, 555555555, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 3, 4, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555
                , 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555
                , 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555
                , 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555
                , 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555
                , 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555
                , 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555
                , 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555
                , 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555
                , 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555, 555555555}, 1));
    }

    @Test
    public void testOrderedPositionOf() {
        int arraySize = 1000000;
        Integer[] array = new Integer[arraySize];

        // Rellenar el array con valores en orden inverso
        for (int i = 0; i < arraySize; i++) {
            array[i] = arraySize - i;
        }

        int order = 500000;
        int expected = order;
        int result = orderedPositionOf(array, order);
        assertEquals(expected, result);
    }

    //    public static <E extends Comparable<E>> int orderedPositionOf(E[] data, int order) {
//        ArrayList<E> collection_clone = new ArrayList<>(Arrays.asList(data));
//        Queue<E> queue = new ArrayDeque<>();
//        for (E element : data) {
//            queue.offer(element);
//        }
//        for (int i = 0; i < order - 1; i++) {
//        queue.poll(); // Remove elements until reaching the desired order
//        }
//
//        E value = queue.poll(); // Get the desired element
//
//
//        if (queue.offer(value)) {
//            return collection_clone.indexOf(value);
//        }
//        return 0;
//    }
    public static <E extends Comparable<E>> int orderedPositionOf(E[] data, int order) {
        ArrayList<E> collection_clone = new ArrayList<>(Arrays.asList(data));
        Arrays.sort(data); // Sort the original array directly


        Queue<E> queue = new ArrayDeque<>();
        for (E element : data) {
            queue.offer(element);
        }

        for (int i = 0; i < order - 1; i++) {
            queue.poll(); // Remove elements until reaching the desired order
        }

        E value = queue.poll(); // Get the desired element

        return collection_clone.indexOf(value);
    }
}

//    return index;
//    }
//public static <E extends Comparable<E>> int orderedPositionOf(E[] data, int order) {
//    E[] clone = data.clone();
//    Arrays.sort(clone);
//    E value = clone[order - 1];
//
//    for (int i = 0; i < data.length; i++) {
//        if (data[i].equals(value)) {
//            return i;
//        }
//    }
//
//    return -1; // Elemento no encontrado
//}
//}

//public static <E extends Comparable<E>> int orderedPositionOf(E[] data, int order) {
//    int left = 0;
//    int right = data.length - 1;
//
//    while (left <= right) {
//        int pivotIndex = partition(data, left, right);
//
//        // Si el pivotIndex es igual al order - 1, hemos encontrado el elemento deseado
//        if (pivotIndex == order - 1) {
//            return pivotIndex;
//        }
//
//        // Si el pivotIndex es mayor que el order - 1, buscamos en la mitad izquierda del array
//        if (pivotIndex > order - 1) {
//            right = pivotIndex - 1;
//        }
//        // Si el pivotIndex es menor que el order - 1, buscamos en la mitad derecha del array
//        else {
//            left = pivotIndex + 1;
//        }
//    }
//
//    return -1; // Elemento no encontrado
//}
//
//private static <E extends Comparable<E>> int partition(E[] data, int left, int right) {
//    E pivot = data[right];
//    int i = left;
//
//    for (int j = left; j < right; j++) {
//        if (data[j].compareTo(pivot) < 0) {
//            swap(data, i, j);
//            i++;
//        }
//    }
//
//    swap(data, i, right);
//    return i;
//}
//
//private static <E> void swap(E[] data, int i, int j) {
//    E temp = data[i];
//    data[i] = data[j];
//    data[j] = temp;
//}